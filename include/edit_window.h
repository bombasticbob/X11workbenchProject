//////////////////////////////////////////////////////////////////////////////////////////
//                  _  _  _                 _             _                  _          //
//         ___   __| |(_)| |_    __      __(_) _ __    __| |  ___ __      __| |__       //
//        / _ \ / _` || || __|   \ \ /\ / /| || '_ \  / _` | / _ \\ \ /\ / /| '_ \      //
//       |  __/| (_| || || |_     \ V  V / | || | | || (_| || (_) |\ V  V /_| | | |     //
//        \___| \__,_||_| \__|_____\_/\_/  |_||_| |_| \__,_| \___/  \_/\_/(_)_| |_|     //
//                           |_____|                                                    //
//                                                                                      //
//                     a window into which you can type text                            //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

/*****************************************************************************

    X11workbench - X11 programmer's 'work bench' application and toolkit
    Copyright (c) 2010-2013 by Bob Frazier (aka 'Big Bad Bombastic Bob')
                             all rights reserved

  DISCLAIMER:  The X11workbench application and toolkit software are supplied
               'as-is', with no waranties, either implied or explicit.

  BSD-like license:

  There is no restriction as to what you can do with this software, so long
  as you include the above copyright notice and DISCLAIMER for any distributed
  work that is equal to or derived from this one, along with this paragraph
  that explains the terms of the license if the source is also being made
  available.  A "derived work" describes a work that uses a significant portion
  of the source files or algorithms that are included with this one.
  Specifically excluded from this are files that were generated by the software,
  or anything that is included with the software that is part of another package
  (such as files that were created or added during the 'configure' process).
  Specifically included is the use of part or all of any of the X11 workbench
  toolkit source or header files in your distributed application.  If you do not
  ship the source, the above copyright statement is still required to be placed
  in a reasonably prominent place, such as documentation, splash screens, and/or
  'about the application' dialog boxes.

  Use and distribution are in accordance with GPL, LGPL, and/or the above
  BSD-like license.  See COPYING and README files for more information.


  Additional information at http://sourceforge.net/projects/X11workbench

******************************************************************************/


#ifndef _EDIT_WINDOW_H_INCLUDED_
#define _EDIT_WINDOW_H_INCLUDED_

#include "text_object.h"
#include "frame_window.h"

/** \file edit_window.h
  * \brief Edit Window API functions
  *
  * Edit Windows are child windows in which the contained text may be edited, optionally
  * supporting multiple tabs.  'View Only' windows cannot be edited, but support all of
  * the other features of an edit window.\n
  * Each edited text object uses the TEXT_OBJECT structure to manage the data and the
  * user interface.  The currently active text object will receive all of the appropriate
  * events.  The Edit Window also provides for horizontal and vertical scrolling, as needed.
*/


#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// OBSOLETE 'IDEA' CODE, LEFT FOR REFERENCE
//
//typedef struct __WBLineBuffer
//{
//  int iLength;  // length of buffer (not including the structure size)
//  int iMaxPos;  // maximum position into which any text has been entered (usually end of line)
//  int iEndOfLine;  // the actual end of line (not counting trailing white space)
//  struct __WBLineBuffer *pPrev, *pNext;  // linked list of buffers
//  char data[4];  // the actual data for the line (typically ASCII)
//  // variable length following this
//} WBLineBuffer;
//
//typedef struct
//{
//  Window wSelf, wOwner;             // window identifiers for self, owner
//  XFontStruct *pFont;               // default font for the window
//  WBLineBuffer *pStart, *pEnd;      // pointers to start and end of linked buffer list
//  WBLineBuffer *pBufArray;          // array of buffers for visible lines
//  int nBufArray;                    // maximum size of buffer array
//  int iTop, iHeight, iLeft, iWidth; // line/char position and size of client area
//                                    // iTop corresponds to pBufArray[0]
//  int iMaxWidth, iMaxHeight;        // size of document in lines and chars
//  int iFlags;                       // various flags associated with the window
//  char *pszFileName;                // file name associated with edit window
//
//} WBEditWindow;
//
//enum
//{
//  WBEditWindowFlags_EncodingMask    = 0x7,
//  WBEditWindowFlags_EncodingASCII   = 0x0,
//  WBEditWindowFlags_EncodingUTF8    = 0x1,
//  WBEditWindowFlags_EncodingUTF16   = 0x2,
//  WBEditWindowFlags_EncodingOther   = 0x3, // 'other' implies locales, etc. (reserved)
//
//  WBEditWindowFlags_Minimized       = 0x40000000L,  // minimized window within owner's client area
//  WBEditWindowFlags_Maximized       = 0x80000000L,  // maximized window within owner's client area
//
//};


/** \typedef WBEditWindow
  * \struct __WBEditWindow__
  * \ingroup edit_window
  * \brief Structure that defines an Edit Window
  *
  * The WBFWMenuHandler structure is designed to be initialized via macros, so
  * that a set of callback functions can then be easily used to handle menu events.
  * If no menu handler is present for a menu item, or if the menu UI handler is
  * NOT NULL and returns a non-zero value, the menu item will be disabled and
  * displayed accordingly.  It will not be possible to use its hotkey nor select it.
  * Otherwise, the menu will be displayed normally and be selectable, and its hotkey
  * will be able to activate it.
  *
  * \code
  typedef struct __WBEditWindow__
  {
    Window wSelf;                     // window identifier for self
    Window wOwner;                    // window identifier for owner
    XFontStruct *pFont;               // default font for the window

    // NOTE:
    int iTop;                         // 0-based position of the top of the viewport (in lines)
    int iHeight;                      // 0-based height of the viewport (in lines)
    int iLeft;                        // 0-based position of the left of the viewport (in characters)
    int iWidth;                       // 0-based width of the viewport (in characters)
    int iFlags;                       // various flags associated with the window (reserved)

    int iTabIndex;                    // Current tab index (for tabbed versions; -1 for "no tabs")
    int nTextObjects;                 // Total number of items in aTextObjects
    int nMaxTextObjects;              // Max number of items in aTextObjects
    TEXT_OBJECT *aTextObjects[2];     // 'TEXT_OBJECT' array

  } WBEditWindow;
  * \endcode
  *
  * \sa \link TEXT_OBJECT \endlink
*/
typedef struct __WBEditWindow__
{
  Window wSelf;                     ///< window identifier for self
  Window wOwner;                    ///< window identifier for owner
  XFontStruct *pFont;               ///< default font for the window

  int iTop;                         ///< 0-based position of the top of the viewport (in lines)
  int iHeight;                      ///< 0-based height of the viewport (in lines)
  int iLeft;                        ///< 0-based position of the left of the viewport (in characters)
  int iWidth;                       ///< 0-based width of the viewport (in characters)
  int iFlags;                       ///< various flags associated with the window (reserved)

  int iTabIndex;                    ///< Current tab index (for tabbed versions; -1 for "no tabs")
  int nTextObjects;                 ///< Total number of items in aTextObjects
  int nMaxTextObjects;              ///< Max number of items in aTextObjects
  TEXT_OBJECT *aTextObjects[2];     ///< 'TEXT_OBJECT' array

} WBEditWindow;


/** \ingroup edit_window
  * \brief Create an Edit Window
  *
  * \param wOwner The Window ID of the owning window
  * \param iTop the client position for the top of the edit window
  * \param iLeft the client position for the left of the edit window
  * \param iWidth the width of the edit window
  * \param iHeight the height of the edit window
  * \returns a pointer to a WBEditWindow object describing the new edit window, or NULL on error
  *
  * This function allows you to create an Edit Window that is a regular child of a frame window or
  * dialog box, as a 'single document' handler.  To create a window that uses the maximum available
  * space within the client area of the parent, specify '-1' for iTop, iLeft, iWidth, and iHeight.
*/
WBEditWindow *WBCreateEditWindow(Window wOwner, int iTop, int iLeft, int iWidth, int iHeight);

/** \ingroup edit_window
  * \brief Create an Edit Window as a 'tab' for a multi-document Frame Window
  *
  * \param pFrameWindow A pointer to a WBFrameWindow structure for the owning frame window
  * \param szFocusMenu A const pointer to a text-based menu resource describing the menu that should appear when the edit window's tab has the focus
  * \param pHandlerArray A const pointer to an array of WBFWMenuHandler structures for the 'focus' menu handler, or NULL if none
  * \returns a pointer to a WBEditWindow object describing the new edit window, or NULL on error
  *
  * This function allows you to create an Edit Window that is a 'tab' (contained window) of a multi-document frame
  * window, specifying a custom menu and menu handler that is in effect whenever this window has the focus.  The edit
  * window will automatically be added to the frame window's list of 'contained' windows.\n
  * The function will return NULL on error.  There is no need to destroy the object manually since the frame
  * window will automatically perform any necessary cleanup.  However, manually destroying the window will
  * propogate to the frame window as well, cleaning up any allocated objects.
  *
  * \sa \ref WBSetEditWindowMenuHandlers
*/
WBEditWindow *WBCreateEditTab(WBFrameWindow *pFrameWindow, const char *szFocusMenu, const WBFWMenuHandler *pHandlerArray);


/** \ingroup edit_window
  * \brief Destroy an Edit Window
  *
  * \param pEditWindow A pointer to the WBEditWindow structure for the edit window
  * \returns void
*/
void WBDestroyEditWindow(WBEditWindow *pEditWindow);

/** \ingroup edit_window
  * \brief Function to assign menu handlers to an edit window
  *
  * \param pEditWindow The pointer to the WBFrameWindow structure for the desired frame window
  * \param szFocusMenu A const pointer to a text-based menu resource describing the menu that should appear when the edit window's tab has the focus
  *
  * Assigns the (new) menu for the edit window.  The text will be copied, and the copy will be
  * used internally, and free'd as necessary.  Only valid when the owner is a Frame Window.
*/
void WBSetEditWindowMenu(WBEditWindow *pEditWindow, const char *szFocusMenu);

/** \ingroup edit_window
  * \brief Function to assign menu handlers to an edit window
  *
  * \param pEditWindow The pointer to the WBFrameWindow structure for the desired frame window
  * \param pHandlerArray A pointer to an array of WBFWMenuHandler structures - see \ref FW_MENU_HANDLER_ENTRY
  *
  * Assigns the (new) menu handlers for the edit window.  The array will be copied, and the copy will be
  * used internally, and free'd as necessary.  Only valid when the owner is a Frame Window.
*/
void WBSetEditWindowMenuHandlers(WBEditWindow *pEditWindow, const WBFWMenuHandler *pHandlerArray);

#ifdef __cplusplus
};
#endif // __cplusplus

#endif // _EDIT_WINDOW_H_INCLUDED_

