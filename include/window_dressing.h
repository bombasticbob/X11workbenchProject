//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//              _             _                        _                       _                   _        //
//   __      __(_) _ __    __| |  ___ __      __    __| | _ __  ___  ___  ___ (_) _ __    __ _    | |__     //
//   \ \ /\ / /| || '_ \  / _` | / _ \\ \ /\ / /   / _` || '__|/ _ \/ __|/ __|| || '_ \  / _` |   | '_ \    //
//    \ V  V / | || | | || (_| || (_) |\ V  V /   | (_| || |  |  __/\__ \\__ \| || | | || (_| | _ | | | |   //
//     \_/\_/  |_||_| |_| \__,_| \___/  \_/\_/_____\__,_||_|   \___||___/|___/|_||_| |_| \__, |(_)|_| |_|   //
//                                           |_____|                                     |___/              //
//                                                                                                          //
//                     Utilities for painting and handling standard components of windows                   //
//                                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*****************************************************************************

    X11workbench - X11 programmer's 'work bench' application and toolkit
    Copyright (c) 2010-2016 by Bob Frazier (aka 'Big Bad Bombastic Bob')
                             all rights reserved

  DISCLAIMER:  The X11workbench application and toolkit software are supplied
               'as-is', with no waranties, either implied or explicit.

  BSD-like license:

  There is no restriction as to what you can do with this software, so long
  as you include the above copyright notice and DISCLAIMER for any distributed
  work that is equal to or derived from this one, along with this paragraph
  that explains the terms of the license if the source is also being made
  available.  A "derived work" describes a work that uses a significant portion
  of the source files or algorithms that are included with this one.
  Specifically excluded from this are files that were generated by the software,
  or anything that is included with the software that is part of another package
  (such as files that were created or added during the 'configure' process).
  Specifically included is the use of part or all of any of the X11 workbench
  toolkit source or header files in your distributed application.  If you do not
  ship the source, the above copyright statement is still required to be placed
  in a reasonably prominent place, such as documentation, splash screens, and/or
  'about the application' dialog boxes.

  Use and distribution are in accordance with GPL, LGPL, and/or the above
  BSD-like license.  See COPYING and README files for more information.


  Additional information at http://sourceforge.net/projects/X11workbench

******************************************************************************/


#ifndef _WINDOW_DRESSING_H_INCLUDED_
#define _WINDOW_DRESSING_H_INCLUDED_

#include "window_helper.h" // make sure
#include "font_helper.h" // make sure

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


/** \file window_dressing.h Utilities for painting and handling standard components of windows
**/

// SCROLL BARS

typedef struct __WB_SCROLLINFO__
{
  int iScrollState;  // scroll state flags - see enumeration
  // fixed dimension sizes - 0 if not known, else based on owner client width/height
  int iVScrollWidth, iHScrollHeight;  // width/height for 'fixed portion' of scrollbar
  int iVBarHeight, iHBarWidth;        // height/width of scrollbars [detect size change]

  // knob size / pos in pixels - 0 if NA, -1 if not known
  int iHKnob, iVKnob; // appropriate relative X or Y pixel position of knob
  int iHKnobSize, iVKnobSize;  // appropriate pixel height/width of knob

  // scroll ranges (actual)
  int iHMin, iHMax;  // 0,0 for "no bar" else inclusive range of H scroll values
  int iVMin, iVMax;  // 0,0 for "no bar" else inclusive range of V scroll values

  // scroll position
  int iHPos, iVPos;  // current scroll position (N/A if outside of min/max range)

  // scroll bar geometries (border not used)
  WB_GEOM geomHBar, geomHLeft, geomHRight, geomHKnob; // empty geometries if not visible
  WB_GEOM geomVBar, geomVUp, geomVDown, geomVKnob;    // empty geometries if not visible

} WB_SCROLLINFO;

enum
{
  WBScrollState_LDRAG = 1, // left button in 'drag' state on vertical scroll bar (relies on drag cancel)
  WBScrollState_RDRAG = 2,
  WBScrollState_MDRAG = 4,
  WBScrollState_HLDRAG = 8, // left button in 'drag' state on horizontal scroll bar
  WBScrollState_HRDRAG = 16,
  WBScrollState_HMDRAG = 32
};


static __inline__ void WBInitScrollInfo(WB_SCROLLINFO *pSI) { bzero(pSI, sizeof(*pSI)); pSI->iHPos = pSI->iVPos = -1; }

void WBSetVScrollRange(WB_SCROLLINFO *pSI, int iMin, int iMax);
void WBSetHScrollRange(WB_SCROLLINFO *pSI, int iMin, int iMax);
void WBSetVScrollPos(WB_SCROLLINFO *pSI, int iPos);
void WBSetHScrollPos(WB_SCROLLINFO *pSI, int iPos);
void WBUpdateScrollBarGeometry(WB_SCROLLINFO *pSI, XFontStruct *pfontReference,
                               WB_GEOM *pgeomClient, WB_GEOM *pgeomUsable);

int WBCalcVScrollDragPos(WB_SCROLLINFO *pScrollInfo, int iY); // 'iY' is the 'y' value for the mouse position relative to window orig
int WBCalcHScrollDragPos(WB_SCROLLINFO *pScrollInfo, int iX); // 'iX' is the 'x' value for the mouse position relative to window orig

// internal SCROLLINFO utilities for list-based dialog controls
void WBCalcVScrollBar(WB_SCROLLINFO *pScrollInfo, WB_GEOM *pgeomClient, int iVScrollWidth,
                      int iHScrollHeight, int nListItems, int nPos);  // calculates V scroll geometry for paint
void WBCalcHScrollBar(WB_SCROLLINFO *pScrollInfo, WB_GEOM *pgeomClient, int iVScrollWidth,
                      int iHScrollHeight, int nListItems, int nPos);  // calculates H scroll geometry for paint

// scroll bar drawing
void WBPaintVScrollBar(WB_SCROLLINFO *pScrollInfo, Display *pDisplay, Window wID,
                       GC gc, WB_GEOM *pgeomClient);
void WBPaintHScrollBar(WB_SCROLLINFO *pScrollInfo, Display *pDisplay, Window wID,
                       GC gc, WB_GEOM *pgeomClient);

// borders and '3D' rectangle art

void WBDrawBorderRect(Display *pDisplay, Window wID, GC gc,
                      WB_GEOM *pgeomBorder, unsigned long lBorderColor);

void WBDraw3DBorderRect(Display *pDisplay, Window wID, GC gc, WB_GEOM *pgeomBorder,
                        unsigned long lBorderColor1, unsigned long lBorderColor2);

void WBDrawDashedRect(Display *pDisplay, Window wID, GC gc, WB_GEOM *pgeomRect, unsigned long lColor);


#ifdef __cplusplus
};
#endif // __cplusplus


#endif // _WINDOW_DRESSING_H_INCLUDED_



