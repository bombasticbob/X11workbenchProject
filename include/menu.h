//////////////////////////////////////////////////////////////////////////////////////////
//                                                        _                             //
//                       _ __ ___    ___  _ __   _   _   | |__                          //
//                      | '_ ` _ \  / _ \| '_ \ | | | |  | '_ \                         //
//                      | | | | | ||  __/| | | || |_| | _| | | |                        //
//                      |_| |_| |_| \___||_| |_| \__,_|(_)_| |_|                        //
//                                                                                      //
//                        generic menu resource implementation                          //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

/*****************************************************************************

    X11workbench - X11 programmer's 'work bench' application and toolkit
    Copyright (c) 2010-2016 by Bob Frazier (aka 'Big Bad Bombastic Bob')
                             all rights reserved

  DISCLAIMER:  The X11workbench application and toolkit software are supplied
               'as-is', with no waranties, either implied or explicit.

  BSD-like license:

  There is no restriction as to what you can do with this software, so long
  as you include the above copyright notice and DISCLAIMER for any distributed
  work that is equal to or derived from this one, along with this paragraph
  that explains the terms of the license if the source is also being made
  available.  A "derived work" describes a work that uses a significant portion
  of the source files or algorithms that are included with this one.
  Specifically excluded from this are files that were generated by the software,
  or anything that is included with the software that is part of another package
  (such as files that were created or added during the 'configure' process).
  Specifically included is the use of part or all of any of the X11 workbench
  toolkit source or header files in your distributed application.  If you do not
  ship the source, the above copyright statement is still required to be placed
  in a reasonably prominent place, such as documentation, splash screens, and/or
  'about the application' dialog boxes.

  Use and distribution are in accordance with GPL, LGPL, and/or the above
  BSD-like license.  See COPYING and README files for more information.


  Additional information at http://sourceforge.net/projects/X11workbench

******************************************************************************/

/** \file menu.h
  * \brief Definition file for menus
  *
  * This is the definition file for menu functions and structures that handle
  * their interpretation, construction, manipulation, and destruction
*/



// a menu bar is a window that contains one or more text menu items, displaying a popup menu
// whenever a text menu item is activated.  The popup menu is displayed as needed.

#ifndef MENU_H_INCLUDED
#define MENU_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


#define WBMENU_RESERVE_DEFAULT (256 * sizeof(void *))

#define WBMENU_POPUP_HIGH_BIT 0x80000000 /* may become platform dependent */
#define WBMENU_POPUP_MASK 0x7fffffff /* may become platform dependent */
#define WBMENU_SEPARATOR -1 /* for WBMenuItem::iAction */


typedef struct
{
  // the following data members are offsets from 'data' for each component of the menu item
  // '-1' generically indicates "none"
  int iMenuItemText;     // offset in 'data' to null-byte terminated strings (-1 if none)
  int iUnderscore;       // offset of (first) 'underscore' within menu text (-1 if none)
  int iTooltipText;      // offset in 'data' to null-byte terminated strings (-1 if none)
  int iHotKey;           // hotkey description (-1 if none)

  // the following data members are numeric properties (not offsets)
  int iAction;           // high bit set for popup; -1 for separator; otherwise, it's a message
                         // if hight bit set, corresponding lower bits are the popup menu ID
  int nHotKey;           // hotkey character translation (0 if none)
  int iTextWidth;        // width of menu text (in pixels; assign '-1' to calculate it)
  int iPosition;         // horizontal/vertical position of menu (in pixels; assign '-1' to calculate it)

  int nDataSize;         // total size of data
  char data[4];          // data follows

} WBMenuItem;

typedef struct __WBMenu
{
  int iMenuID;      // menu identifier specified when menu was created (high bit set for popup)

  WBMenuItem **ppItems;
  int nItems, nMaxItems;

  struct __WBMenu **ppPopups;  // a list of popup menus
  int nPopups, nMaxPopups;  // size (and max size) of the popup list

} WBMenu;

// construction and destruction

WBMenu *MBCreateMenu(int iID, int iPopup, const char *pszResource, int iReserveSpace);
  // pass in full menu resource 'pszResource' including any referenced popup menus. If a popup menu
  // isn't specified here it can be added later via 'MBAddPopupMenu'.  Specify '-1' for iID to
  // read ID (and popup specifier) from the menu resource.  'iPopup' is non-zero for popup, zero for bar

void MBDestroyMenu(WBMenu *pMenu);  // always destroy with this function


// menu items
WBMenuItem *MBCreateMenuItem(const char **ppszResource);  // create single menu item, and point *ppszResource to next item in resource
void MBDestroyMenuItem(WBMenuItem *pMenuItem);
int MBAddMenuItem(WBMenu *pMenu, WBMenuItem *pItem, int iPos);  // makes copy of WBMenuItem struct and inserts at 'iPos' (zero-based, -1 implies 'end')
void MBDelMenuItem(WBMenu *pMenu, int iPos);  // deletes menu item - 'iPos' has same semantics as above

// popup menus
int MBAddPopupMenu(WBMenu *pMenu, WBMenu *pPopupMenu); // use this when you add a popup menu item to add the actual popup menu
WBMenu *MBFindPopupMenu(WBMenu *pMenu, int idPopup);
WBMenu *MBRemovePopupMenu(WBMenu *pMenu, int idPopup);  // NOTE:  you must destroy the returned menu yourself

static __inline__ int MBMenuIsPopup(WBMenu *pMenu) { return pMenu && (pMenu->iMenuID & WBMENU_POPUP_HIGH_BIT); }

int MBMenuProcessHotKey(WBMenu *pMenu, XKeyEvent *pEvent); // menu owner calls this to check for menu-based hotkeys

#ifdef __cplusplus
};
#endif // __cplusplus

#endif // MENU_H_INCLUDED

