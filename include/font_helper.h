//////////////////////////////////////////////////////////////////////////////////////////
//          __                _         _            _                     _            //
//         / _|  ___   _ __  | |_      | |__    ___ | | _ __    ___  _ __ | |__         //
//        | |_  / _ \ | '_ \ | __|     | '_ \  / _ \| || '_ \  / _ \| '__|| '_ \        //
//        |  _|| (_) || | | || |_      | | | ||  __/| || |_) ||  __/| | _ | | | |       //
//        |_|   \___/ |_| |_| \__|_____|_| |_| \___||_|| .__/  \___||_|(_)|_| |_|       //
//                               |_____|               |_|                              //
//                       basic font enumeration and selection                           //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

/*****************************************************************************

    X11workbench - X11 programmer's 'work bench' application and toolkit
    Copyright (c) 2010-2016 by Bob Frazier (aka 'Big Bad Bombastic Bob')
                             all rights reserved

  DISCLAIMER:  The X11workbench application and toolkit software are supplied
               'as-is', with no waranties, either implied or explicit.

  BSD-like license:

  There is no restriction as to what you can do with this software, so long
  as you include the above copyright notice and DISCLAIMER for any distributed
  work that is equal to or derived from this one, along with this paragraph
  that explains the terms of the license if the source is also being made
  available.  A "derived work" describes a work that uses a significant portion
  of the source files or algorithms that are included with this one.
  Specifically excluded from this are files that were generated by the software,
  or anything that is included with the software that is part of another package
  (such as files that were created or added during the 'configure' process).
  Specifically included is the use of part or all of any of the X11 workbench
  toolkit source or header files in your distributed application.  If you do not
  ship the source, the above copyright statement is still required to be placed
  in a reasonably prominent place, such as documentation, splash screens, and/or
  'about the application' dialog boxes.

  Use and distribution are in accordance with GPL, LGPL, and/or the above
  BSD-like license.  See COPYING and README files for more information.


  Additional information at http://sourceforge.net/projects/X11workbench

******************************************************************************/

/** \file font_helper.h
  * \brief Definition file for font helper functions and structures
  *
  * This is the definition file for font helper functions and structures, designed
  * to SPECIFICALY work with 'X11 Core' fonts and rendering.  Compatibility and
  * support for 'Xft' fonts and rendering is currently 'reserved for future implementation'.
  * Fonts under X11 (core) are generally difficult to deal with.  These utility
  * functions allow you to more easily select a font based on an existing
  * font or a general description of a font, with 'fuzzy' matching.
*/


#ifndef _FONT_HELPER_H_INCLUDED_
#define _FONT_HELPER_H_INCLUDED_

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


/** \ingroup debug
  * \brief Dump debug information about fonts according to pSpec
  *
  * \param pSpec An ASCII specification for font matching
  *
  * Use this function to gain insight into the available fonts.  Output is dumped to stderr
  * using the debug output functions.
**/
void WBDumpFontInfo(const char *pSpec);  // debugging function - dumps a list of fonts and info

/** \ingroup font
  * \brief make a copy of an existing font (best when assigning to a window)
  *
  * \param pFont The original font to be copied
  * \returns A copy of the original font as an XFontStruct
  *
  * use this function to make a copy of an existing XFontStruct
**/
XFontStruct *WBCopyFont(XFontStruct *pFont);

/** \ingroup font
  * \brief load a font based on a font name, size, and font flags
  *
  * \param pDisplay A pointer to the display
  * \param szFontName A 0-byte terminated ASCII string specifying the desired font name
  * \param iFontSize The font size, > 0 for height, < 0 for width, 0 for 'do not care'\n
  * the font size is based on the WBFontFlag_SIZE_xxx flag specified in 'iFlags'
  * \param iFlags Various \ref WBFontFlags that specify font characteristics
  * \return An XFontStruct pointer for the desired font, or NULL on error.
  *
  * font mapping helper - uses size, italic, bold, 'flags' and font name to
  * determine "the best font" based on a simple mapping algorithm.\n
  * negative 'iFontSize' is the average font width\n
  * Positive 'iFontSize' is the height (including ascend/descend)\n
  * A value of '0' is considered to be a 'wildcard' match.  Use a positive 'iFontSize' for more precise
  * font measurement.\n
  * On error this function returns NULL.  A non-NULL returned value will need to be released
  * using XUnloadFont()
**/
XFontStruct *WBLoadFont(Display *pDisplay, const char *szFontName,
                        int iFontSize, int iFlags);

/** \ingroup font
  * \brief load and modify a font according to the specified size and flags
  *
  * \param pDisplay A pointer to the display
  * \param pOriginal The original font on which to base the new font
  * \param iFontSize The font size (see \ref WBLoadFont() for more details)\n
  * For a non-zero value, the font size is based on the WBFontFlag_SIZE_xxx flag specified in 'iFlags'
  * An 'iFontSize' value of ZERO copies the font size from the original font specified in 'pOriginal'.
  * \param iFlags Various \ref WBFontFlags that specify font characteristics.  The existing font
  * is modified according to these flags.  If the font size is zero, flags that modify the font size
  * will be ignored.
  * \return An XFontStruct pointer for the desired font, or NULL on error
  *
  * use this function to select a similar font that differs only by whatever is specified
  * in 'iFontSize' or 'iFlags'.  If a matching font is NOT available, a copy of the original
  * font will be returned.  Typical use is to 'bold' or 'italicize' an existing font.\n
  * On error this function returns NULL.  A non-NULL returned value will need to be released
  * using XUnloadFont()
**/
XFontStruct *WBLoadModifyFont(Display *pDisplay, const XFontStruct *pOriginal,
                              int iFontSize, int iFlags);

/** \ingroup font
  * \brief Creates an 'XFontSet' from an XFontStruct for a given display
  *
  * \param pDisplay A pointer to the Display ( NULL uses \ref WBGetDefaultDisplay() )
  * \param pFont A pointer to an XFontStruct
  * \returns An XFontSet appropriate to the XFontStruct
  *
  * This function helps to support internationalization through use of the 'Xmb'
  * 'Xwc' and 'Xutf8' versions of the X11 'core' text rendering API functions
  * by creating an 'XFontSet' that matches all of the available character sets for
  * a supplied font specification.
**/
XFontSet WBFontSetFromFont(Display *pDisplay, const XFontStruct *pFont);



// font flag enumeration
enum WBFontFlags
{
  WBFontFlag_PITCH_FIXED     = 1,       // force fixed pitch
  WBFontFlag_PITCH_VARIABLE  = 2,       // force variable pitch
  WBFontFlag_PITCH_CONDENSED = 4,       // condensed (alternate to 'fixed')
  WBFontFlag_PITCH_ANY       = 0,
  WBFontFlag_PITCH_MASK      = 7,       // 'pitch mask'

  WBFontFlag_STYLE_SANS      = 8,       // force sans-serif
  WBFontFlag_STYLE_SERIF     = 0x10,    // force serif (i.e. 'not sans')
  WBFontFlag_Reserved20      = 0x20,    // reserved (style)
  WBFontFlag_Reserved40      = 0x40,    // reserved (style)
  WBFontFlag_STYLE_ANY       = 0,
  WBFontFlag_STYLE_MASK      = 0x78,    // style mask

  WBFontFlag_RASTER          = 0x80,    // force raster (xfree86?)
  WBFontFlag_FREETYPE        = 0x100,   // force freetype
  WBFontFlag_Reserved200     = 0x200,   // reserved (foundry)
  WBFontFlag_FNDRY_ANY       = 0,
  WBFontFlag_FNDRY_MASK      = 0x380,   // 'foundry mask'

  // if the font size is > 0 then these bits apply
  WBFontFlag_SIZE_PIXELS     = 0,       // font size is in 'pixels'
  WBFontFlag_SIZE_POINTS     = 0x400,   // font size is in 'points'
  WBFontFlag_SIZE_TWIPS      = 0x800,   // font size is in 'twips'
  WBFontFlag_SIZE_Reserved   = 0xc00,   // reserved (size)
  WBFontFlag_SIZE_MASK       = 0xc00,   // 'size mask'

  WBFontFlag_WT_ANY          = 0,       // font weight specification
  WBFontFlag_WT_REGULAR      = 0x1000,  // only one constant may be specified
  WBFontFlag_WT_MEDIUM       = 0x2000,
  WBFontFlag_WT_DEMIBOLD     = 0x3000,
  WBFontFlag_WT_BOLD         = 0x4000,
  WBFontFlag_WT_Reserved5    = 0x5000,  // reserved (5)
  WBFontFlag_WT_Reserved6    = 0x6000,  // reserved (6)
  WBFontFlag_WT_MASK         = 0x7000,  // weight mask

  WBFontFlag_SLANT_REGULAR   = 0x10000, // slant (italic, oblique, regular)
  WBFontFlag_SLANT_OBLIQUE   = 0x20000,
  WBFontFlag_SLANT_ITALIC    = 0x30000,
  WBFontFlag_SLANT_ANY       = 0,       // default slant may return an italic or oblique font
  WBFontFlag_SLANT_MASK      = 0x30000, // slant mask

  WBFontFlag_WIDTH_NORMAL    = 0x40000,
  WBFontFlag_WIDTH_SEMICOND  = 0x80000, // semicondensed
  WBFontFlag_WIDTH_Reserved  = 0xc0000, // reserved (condensed? blank?)
  WBFontFlag_WIDTH_ANY       = 0,
  WBFontFlag_WIDTH_MASK      = 0xc0000, // width mask

  // reserved - font registry and encoding (installed X11 fonts typically include most if not all of these)
  WBFontFlag_REG_ISO8859     = 0x100000, // known (common) registries
  WBFontFlag_REG_ISO646_1991 = 0x200000,
  WBFontFlag_REG_ASCII       = 0x300000,
  WBFontFlag_REG_FNTSPECIFIC = 0x400000, // font specific
  WBFontFlag_REG_MISC        = 0x500000,
  WBFontFlag_REG_GB2312_1980 = 0x600000,
  WBFontFlag_REG_ADOBE       = 0x700000, // a lot of fonts fall into this category
  WBFontFlag_REG_Reserved8   = 0x800000,
  WBFontFlag_REG_Reserved9   = 0x900000,
  WBFontFlag_REG_ReservedA   = 0xa00000,
  WBFontFlag_REG_ReservedB   = 0xb00000,
  WBFontFlag_REG_ReservedC   = 0xc00000,
  WBFontFlag_REG_ReservedD   = 0xd00000,
  WBFontFlag_REG_ReservedE   = 0xe00000,
  WBFontFlag_REG_ReservedF   = 0xf00000,
  WBFontFlag_REG_MASK        = 0xf00000, // /registry mask'

  // TODO: flags for 'encoding' ?

  WBFontFlag_WHATEVER        = 0    // don't force anything
};



#ifdef __cplusplus
};
#endif // __cplusplus


#endif // _FONT_HELPER_H_INCLUDED_

