//////////////////////////////////////////////////////////////////////////////////////////////
//          _                                     _            _                     _      //
//   _ __  (_)__  __ _ __ ___    __ _  _ __      | |__    ___ | | _ __    ___  _ __ | |__   //
//  | '_ \ | |\ \/ /| '_ ` _ \  / _` || '_ \     | '_ \  / _ \| || '_ \  / _ \| '__|| '_ \  //
//  | |_) || | >  < | | | | | || (_| || |_) |    | | | ||  __/| || |_) ||  __/| | _ | | | | //
//  | .__/ |_|/_/\_\|_| |_| |_| \__,_|| .__/_____|_| |_| \___||_|| .__/  \___||_|(_)|_| |_| //
//  |_|                               |_|  |_____|               |_|                        //
//                                                                                          //
//             pixmap and icon helpers (ultimately providing universal support)             //
//                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////

/*****************************************************************************

    X11workbench - X11 programmer's 'work bench' application and toolkit
    Copyright (c) 2010-2016 by Bob Frazier (aka 'Big Bad Bombastic Bob')
                             all rights reserved

  DISCLAIMER:  The X11workbench application and toolkit software are supplied
               'as-is', with no waranties, either implied or explicit.

  BSD-like license:

  There is no restriction as to what you can do with this software, so long
  as you include the above copyright notice and DISCLAIMER for any distributed
  work that is equal to or derived from this one, along with this paragraph
  that explains the terms of the license if the source is also being made
  available.  A "derived work" describes a work that uses a significant portion
  of the source files or algorithms that are included with this one.
  Specifically excluded from this are files that were generated by the software,
  or anything that is included with the software that is part of another package
  (such as files that were created or added during the 'configure' process).
  Specifically included is the use of part or all of any of the X11 workbench
  toolkit source or header files in your distributed application.  If you do not
  ship the source, the above copyright statement is still required to be placed
  in a reasonably prominent place, such as documentation, splash screens, and/or
  'about the application' dialog boxes.

  Use and distribution are in accordance with GPL, LGPL, and/or the above
  BSD-like license.  See COPYING and README files for more information.


  Additional information at http://sourceforge.net/projects/X11workbench

******************************************************************************/


#ifndef _PIXMAP_HELPER_H_
#define _PIXMAP_HELPER_H_

#include "window_helper.h"  // if not already included, I must include this

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


#define ID_ICON_FIRST     101
#define ID_APPLICATION    101 /* 19x19 application icon */
#define ID_ICON_OK        102
#define ID_ICON_STOP      103
#define ID_ICON_WARN      104 /* yellow triangle, ! */
#define ID_ICON_WHAT      105
#define ID_ICON_QUESTION  105
#define ID_ICON_SPLAT     106
#define ID_ICON_ASTERISK  106
#define ID_ICON_BANG      107 /* yellow circle, ! */
#define ID_ICON_TRIANGLE  108
#define ID_ICON_WHAT_BOLD 109
#define ID_ICON_WTF       110
#define ID_ICON_DEATH     111
#define ID_ICON_FINGER    112
#define ID_ICON_SKULL     113
#define ID_ICON_THUMBUP   114
#define ID_ICON_THUMBDOWN 115
#define ID_ICON_BEAR      116
#define ID_ICON_BARNEY    117
#define ID_ICON_APP       118 /* 36x36 application icon */
#define ID_ICON_LAST      118 /* must alter this if new items added */


/** \ingroup pixmap
  * \brief Icon Registration for application 'large' and 'small' icons
  *
  * \param ppRegAppLarge XPM definition array for 'large' 36x36 icon, IDC_ICON_APP
  * \param ppRegAppSmall XPM definition array for 'small' 19x19 icon, ID_APPLICATION
  *
  * Use this function to register the application's icons for IDC_ICON_APP and ID_APPLICATION.  In this
  * way you can use both of them in dialog boxes and take advantage of PXM_GetIconPixmap() to create
  * a pair of icon pixmaps whenever they are needed.
  *
  * Header File:  pixmap_helper.h
**/
void PXM_RegisterAppIcons(char *ppRegAppLarge[], char *ppRegAppSmall[]);


/** \ingroup pixmap
  * \brief Register an icon (or pixmap) resource using an Atom
  *
  * \param aResource The Atom that will be used to identify the resource
  * \param ppResource The XPM data array that defines the pixmap or icon
  * \returns The function returns zero on success, non-zero on error.
  *
  * This function allows you to register a pixmap or icon resource using an Atom.  Typically
  * this will be used by dialog boxes or menus to conveniently identify pixmap or icon images.
  *
  * Header File:  pixmap_helper.h
**/
int PXM_RegisterPixmapResource(Atom aResource, char *ppResource[]);



/** \ingroup pixmap
  * \brief Create Icon pixmap pair using pre-defined resource ID
  *
  * \param idIcon The unique (numeric) identifier associated with the icon
  * \param pAttr A pointer to an XpmAttributes structure when libXpm is present, or an XPM_ATTRIBUTES compatibility structure otherwise.\n
  * For portability you should use the XPM_ATTRIBUTES definition, even when libXpm is guaranteed to be present.
  * \param pMask A pointer to the variable that receives the 'Transparency Mask' pixmap for the icon (may be 'None').  This parameter may be NULL.
  * \returns The pixmap identifier for the Icon image, or None on error.
  *
  * Use this function whenever you need to load an icon using a pre-defined resource ID.
  *
  * Header File:  pixmap_helper.h
**/
Pixmap PXM_GetIconPixmap(int idIcon, XPM_ATTRIBUTES *pAttr, Pixmap *pMask /* = NULL*/);


/** \ingroup pixmap
  * \brief Create Icon pixmap pair using a registered or pre-defined resource ID
  *
  * \param aIcon An atom that identifies a registered or pre-defined resource ID
  * \param pAttr A pointer to an XpmAttributes structure when libXpm is present, or an XPM_ATTRIBUTES compatibility structure otherwise.\n
  * For portability you should use the XPM_ATTRIBUTES definition, even when libXpm is guaranteed to be present.
  * \param pMask A pointer to the variable that receives the 'Transparency Mask' pixmap for the icon (may be 'None').  This parameter may be NULL.
  * \returns The pixmap identifier for the Icon image, or None on error.
  *
  * Use this function whenever you need to load an icon using a pre-defined or registered Atom
  *
  * Header File:  pixmap_helper.h
**/
Pixmap PXM_GetIconPixmapFromAtom(Atom aIcon, XPM_ATTRIBUTES *pAttr, Pixmap *pMask /* = NULL*/);



/** \ingroup pixmap
  * \brief Create pixmap or pixmap pair using an XPM array
  *
  * \param ppXPM XPM definition array for the associated graphic
  * \param pAttr A pointer to an XpmAttributes structure when libXpm is present, or an XPM_ATTRIBUTES compatibility structure otherwise.
  * Pass a NULL pointer if you do not need the attributes.\n
  * For portability you should use the XPM_ATTRIBUTES definition, even when libXpm is guaranteed to be present.
  * \param pMask A pointer to the variable that receives the 'Transparency Mask' pixmap for the image or icon (may be 'None').
  * Pass a NULL pointer if you do not need the mask.
  * \returns The pixmap identifier for the image, or None on error.
  *
  * This function conveniently wraps XpmCreatePixmapFromData()
  *
  * Header File:  pixmap_helper.h
**/
Pixmap PXM_LoadPixmap(char *ppXPM[], XPM_ATTRIBUTES *pAttr, Pixmap *pMask /* = NULL*/);



/** \ingroup pixmap
  * \brief Convert 'locally stored' XImage to 'server object' Pixmap
  *
  * \param pDisplay The display pointer.  NULL uses the default display.
  * \param dw The 'Drawable' for which the pixmap will be created.
  * \param pImage The image to convert.  This must be a valid image with non-zero height/width specified in the structure.
  * \param clrFGPixel Foreground color pixel to use for monochrome images, typically BlackPixel(pDisplay, DefaultScreen(pDisplay))
  * \param clrBGPixel Background color pixel to use for monochrome images, typically WhitePixel(pDisplay, DefaultScreen(pDisplay))
  * \returns The resultant pixmap
  *
  * This function is a convenient way to perform a standard operation that converts an Image to a Pixmap.  A pixmap is a
  * more efficient way of storing graphic data for subsequent display.  Typically a pixmap will be cached for a window's
  * Expose event handler, and is re-created when needed.  Pixmaps are typically stored by the X server, so an operation
  * that paints a window with a pixmap should perform more efficiently.  However, a pixmap cannot be queried nor
  * directly manipulated, while an XImage can.\n
  * The function returns a Pixmap identifier, or None.  To delete the Pixmap, use XFreePixmap().
  *
  * Header File:  pixmap_helper.h
**/
Pixmap PXM_ImageToPixmap(Display *pDisplay, Drawable dw, XImage *pImage,
                         unsigned long clrFGPixel, unsigned long clrBGPixel);



/** \ingroup pixmap
  * \brief Convert 'locally stored' XImage to 'server object' Pixmap using default FG/BG colors for monochrome
  *
  * \param pDisplay The display pointer.  NULL uses the default display.
  * \param dw The 'Drawable' for which the pixmap will be created.
  * \param pImage The image to convert.  This must be a valid image with non-zero height/width specified in the structure.
  * \returns The resultant pixmap
  *
  * This function is a convenient way to perform a standard operation that converts an Image to a Pixmap.  A pixmap is a
  * more efficient way of storing graphic data for subsequent display.  Typically a pixmap will be cached for a window's
  * Expose event handler, and is re-created when needed.  Pixmaps are typically stored by the X server, so an operation
  * that paints a window with a pixmap should perform more efficiently.  However, a pixmap cannot be queried nor
  * directly manipulated, while an XImage can.\n
  * For monochrome images, the foreground color is black, and the background color is white.\n
  * The function returns a Pixmap identifier, or None.  To delete the Pixmap, use XFreePixmap().
  *
  * Header File:  pixmap_helper.h
**/
Pixmap PXM_ImageToPixmap0(Display *pDisplay, Drawable dw, XImage *pImage);



/** \ingroup pixmap
  * \brief Convert pixmap to image (a wrapper for XGetImage on a pixmap)
  *
  * \param pDisplay The disply pointer.  NULL uses the default display.
  * \param pxImage The image pixmap
  * \returns An XImage pointer allocated by Xlib, with data in ZPixmap format.  Use XDestroyImage to dispose of it.
  *
  * This function wraps the functionality of XGetImage with a simpler interface, returning an XImage * to an object
  * allocated by Xlib.  A pixmap is typically stored on the X Server, whereas an XImage is stored locally.\n
  * XGetImage creates an XImage using the same depth as the pixmap.  The plane mask specified by this function includes
  * all image data, and the origin is always 0,0.  The XImage format is always ZPixmap.\n
  * The size of the pixmap is automatically determined using XGetGeometry().  As a side note, you could theoretically
  * use this function to create an image from a pixmap for the purpose of determining its characteristics.\n
  * The function returns NULL on error.  Use XDestroyImage to dispose of the XImage object.
  *
  * Header File:  pixmap_helper.h
**/
XImage *PXM_PixmapToImage(Display *pDisplay, Pixmap pxImage);




/** \ingroup startup
  * \brief Frees resources allocated by \ref pixmap
  *
  * Call this to free resources allocated by the PXM functions.  Called by \ref WBExit()
  *
  * Header File:  pixmap_helper.h
**/
void PXM_OnExit(void);


#ifdef __cplusplus
};
#endif // __cplusplus

#endif // _PIXMAP_HELPER_H_

