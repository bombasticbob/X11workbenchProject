///////////////////////////////////////////////////////////////////////
//                                                                   //
//        _     _ _     _      __                            _       //
//    ___| |__ (_) | __| |    / _|_ __ __ _ _ __ ___   ___  | |__    //
//   / __| '_ \| | |/ _` |   | |_| '__/ _` | '_ ` _ \ / _ \ | '_ \   //
//  | (__| | | | | | (_| |   |  _| | | (_| | | | | | |  __/_| | | |  //
//   \___|_| |_|_|_|\__,_|___|_| |_|  \__,_|_| |_| |_|\___(_)_| |_|  //
//                      |_____|                                      //
//                                                                   //
//         a window that exists as a tab in a frame window           //
//                                                                   //
///////////////////////////////////////////////////////////////////////

/*****************************************************************************

    X11workbench - X11 programmer's 'work bench' application and toolkit
    Copyright (c) 2010-2016 by Bob Frazier (aka 'Big Bad Bombastic Bob')
                             all rights reserved

  DISCLAIMER:  The X11workbench application and toolkit software are supplied
               'as-is', with no waranties, either implied or explicit.

  BSD-like license:

  There is no restriction as to what you can do with this software, so long
  as you include the above copyright notice and DISCLAIMER for any distributed
  work that is equal to or derived from this one, along with this paragraph
  that explains the terms of the license if the source is also being made
  available.  A "derived work" describes a work that uses a significant portion
  of the source files or algorithms that are included with this one.
  Specifically excluded from this are files that were generated by the software,
  or anything that is included with the software that is part of another package
  (such as files that were created or added during the 'configure' process).
  Specifically included is the use of part or all of any of the X11 workbench
  toolkit source or header files in your distributed application.  If you do not
  ship the source, the above copyright statement is still required to be placed
  in a reasonably prominent place, such as documentation, splash screens, and/or
  'about the application' dialog boxes.

  Use and distribution are in accordance with GPL, LGPL, and/or the above
  BSD-like license.  See COPYING and README files for more information.


  Additional information at http://sourceforge.net/projects/X11workbench

******************************************************************************/


#ifndef _CHILD_FRAME_H_INCLUDED_
#define _CHILD_FRAME_H_INCLUDED_

#include "text_object.h"
#include "frame_window.h"

/** \file child_frame.h
  * \brief Child Frame API functions
  *
  * Child Frames are child windows that display a tab in the Frame window, and have
  * specialized menus and menu handlers associated with them.\n
  * The Child Frame also provides for horizontal and vertical scrolling of the display
  * surface, as needed, varying the display region.\n
  * A derived window will need to register the appropriate callbacks, and have the
  * '
*/


#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


/** \typedef WBChildFrame
  * \struct __WBChildFrame__
  * \ingroup child_frame
  * \brief Structure that defines a Child Frame within a Frame Window
  *
  * The WBFWMenuHandler structure is designed to be initialized via macros, so
  * that a set of callback functions can then be easily used to handle menu events.
  * If no menu handler is present for a menu item, or if the menu UI handler is
  * NOT NULL and returns a non-zero value, the menu item will be disabled and
  * displayed accordingly.  It will not be possible to use its hotkey nor select it.
  * Otherwise, the menu will be displayed normally and be selectable, and its hotkey
  * will be able to activate it.
  *
  * \code
  typedef struct __WBChildFrame__
  {
    Window wSelf;                     // window identifier for self
    Window wOwner;                    // window identifier for owner
    XFontStruct *pFont;               // default font for the window

    int iTop;                         // 0-based position of the top of the current viewport (in lines or pixels)
    int iHeight;                      // 0-based height of the current viewport (in lines or pixels)
    int iLeft;                        // 0-based position of the left of the current viewport (in characters or pixels)
    int iWidth;                       // 0-based width of the current viewport (in characters or pixels)

    int iTabIndex;                    // Current tab index (for tabbed versions; -1 for "no tabs")
    int fFlags;                       // various bitflags defining features.

    char *szDisplayName;              // display name shown in tab and title bar.  You should not alter this member.

    WBWinEvent pUserCallback;         // message callback function pointer (can be NULL)

    struct __WBChildFrame__ *pNext;   // 'Next Object' pointer in an internally stored linked list

  } WBChildFrame;
  * \endcode
  *
  * \sa \link frame \endlink
  *
  * NOTE:  you should not attempt to modify any of these structure members directly.  Use the appropriate
  *        API functions to modify their values.  If this were C++, these members would be marked 'protected'.
*/
typedef struct __WBChildFrame__
{
  Window wSelf;                     ///< window identifier for self
  Window wOwner;                    ///< window identifier for owner (must be a WBFrameWindow)
  XFontStruct *pFont;               ///< default font for the window

  int iTop;                         ///< 0-based position of the top of the current viewport (in lines or pixels)
  int iHeight;                      ///< 0-based height of the current viewport (in lines or pixels)
  int iLeft;                        ///< 0-based position of the left of the current viewport (in characters or pixels)
  int iWidth;                       ///< 0-based width of the current viewport (in characters or pixels)

  int iTabIndex;                    ///< Current tab index (for tabbed versions; -1 for "no tabs")
  int fFlags;                       ///< various bitflags defining features.  See WBChildFrame_FLAGS enum.

  char *szDisplayName;              ///< display name shown in tab and title bar.  You should not alter this member.

  WBWinEvent pUserCallback;         ///< message callback function pointer (can be NULL)

  struct __WBChildFrame__ *pNext;   ///< 'Next Object' pointer in an internally stored linked list

} WBChildFrame;


/** \enum WBChildFrame_FLAGS
  * \ingroup child_frame
  * \brief enumeration for 'fFlags' member of WBChildFrame
*/  
enum WBChildFrame_FLAGS 
{
  WBChildFrame_NO_TAB = 1,  ///< does not use tabs [intended for SDI interface]
  WBChildFrame_PIXELS = 2,  ///< use PIXELS instead of characters and lines to define the viewport
};



/** \ingroup child_frame
  * \brief Initialize a child frame (assumed to be a base 'class' for the window)
  *
  * \param pChildFrame a pointer to the WBChildFrame associated with the window
  * \param pOwner A pointer to the owning WBFrameWindow.  Can not be NULL.
  * \param pFont The desired font, or NULL to use the default
  * \param szFocusMenu A const pointer to a text-based menu resource describing the menu that should appear when the Child Frame's tab has the focus.  Can be NULL if none.
  * \param pHandlerArray A const pointer to an array of WBFWMenuHandler structures for the 'focus' menu handler.  Can be NULL if none.
  * \param pUserCallback A pointer to the callback function that handles messages (Return 0 for default handling, != 0 if handled).  Can be NULL.
  * \param fFlags A bitwise 'or' of the desired flags associated with this Child Frame.  See 'WBChildFrame_FLAGS'
  * \returns an integer value, 0 on success, anything else being an error code
  *
  * This function creates the actual window for a 'derived' Child Frame window, and correctly initializes
  * that portion of the internal data structure corresponding to a Child Frame.  The 'WBChildFrame' should
  * normally be the first member of the data structure representing the 'derived' Child Frame window, so you
  * can do a direct type cast of the pointer, similar to the way abstraction and polymorphism works in C++.\n
  * A child frame is not created directly.  Instead, create the 'derived' version's structure, and initialize
  * the structure for the derived behavior, with the WBChildFrame structure as the first element.  Then initialize
  * the WBChildFrame structure with this function, which will create the child frame window ID and register it with
  * the specified WBFrameWindow Window ID.\n
  * Failure to call this function will prevent the 'Child Frame' functionality from working correctly, and will not
  * register the relationship between the Window ID and the WBChildFrame structure.
  *
  * NOTE:  To create a stand-alone 'derived' Child Frame, first create a minimal frame window, and then disable 'tabs'.
  *
  * \sa \link frame \endlink
*/
int WBInitChildFrame(WBChildFrame *pChildFrame, WBFrameWindow *pOwner, XFontStruct *pFont,
                     const char *szFocusMenu, const WBFWMenuHandler *pHandlerArray,
                     WBWinEvent pUserCallback, int fFlags);

/** \ingroup child_frame
  * \brief Destroy an Child Frame
  *
  * \param pChildFrame A pointer to the WBChildFrame structure for the Child Frame
  * \returns void
  *
  * Call this function to destroy the actual window and de-reference
*/
void WBDestroyChildFrame(WBChildFrame *pChildFrame);

/** \ingroup child_frame
  * \brief Function to assign the menu resource to a Child Frame
  *
  * \param pChildFrame The pointer to the WBChildFrame structure for the desired Child Frame window
  * \param szFocusMenu A const pointer to a text-based menu resource describing the menu that should appear when the Child Frame's tab has the focus
  *
  * Assigns the (new) menu for the Child Frame.  The text will be copied, and the copy will be
  * used internally, and free'd as necessary.  Only valid when the owner is a Frame Window.
*/
void WBSetEditWindowMenu(WBChildFrame *pChildFrame, const char *szFocusMenu);

/** \ingroup child_frame
  * \brief Function to assign menu handlers to a Child Frame
  *
  * \param pChildFrame The pointer to the WBChildFrame structure for the desired Child Frame window
  * \param pHandlerArray A pointer to an array of WBFWMenuHandler structures - \sa \link FW_MENU_HANDLER_ENTRY \endlink
  *
  * Assigns the (new) menu handlers for the Child Frame.  The array will be copied, and the copy will be
  * used internally, and free'd as necessary.
*/
void WBSetChildFrameMenuHandlers(WBChildFrame *pChildFrame, const WBFWMenuHandler *pHandlerArray);

/** \ingroup child_frame
  * \brief Assign the display name
  *
  * \param pChildFrame The pointer to the WBChildFrame structure for the desired Child Frame window
  * \param szDisplayName A pointer to a character array containing the new display name text, to appear in the tab and/or title bar
  *
  * Assigns the display name for the Child Frame, to appear in the tab and (optionally) in the frame window's title bar
  * whenever the Child Frame has the focus.
*/
void WBSetChildFrameDisplayName(WBChildFrame *pChildFrame, const char *szDisplayName);


/** \ingroup child_frame
  * \brief Obtain the associated WBChildFrame structure pointer for a Window ID
  *
  * \param wID A valid Window ID
  * \returns A pointer to the associated WBChildFrame structure (if it is a WBChildFrame), or NULL on error
  *
  * Use this function to safely obtain the correct WBChildFrame structure for a given Window ID.
*/
WBChildFrame *WBChildFrameFromWindowID(Window wID);


#ifdef __cplusplus
};
#endif // __cplusplus

#endif // _CHILD_FRAME_H_INCLUDED_

