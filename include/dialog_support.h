/////////////////////////////////////////////////////////////////////////////////////////////////////////
//         _  _         _                                                            _       _         //
//      __| |(_)  __ _ | |  ___    __ _       ___  _   _  _ __   _ __    ___   _ __ | |_    | |__      //
//     / _` || | / _` || | / _ \  / _` |     / __|| | | || '_ \ | '_ \  / _ \ | '__|| __|   | '_ \     //
//    | (_| || || (_| || || (_) || (_| |     \__ \| |_| || |_) || |_) || (_) || |   | |_  _ | | | |    //
//     \__,_||_| \__,_||_| \___/  \__, |_____|___/ \__,_|| .__/ | .__/  \___/ |_|    \__|(_)|_| |_|    //
//                                |___/|_____|           |_|    |_|                                    //
//                                                                                                     //
//                                                                                                     //
//                                 additional dialog control support                                   //
// This file contains semi-private definitions that are needed to generically support dialog controls  //
//                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////

/*****************************************************************************

    X11workbench - X11 programmer's 'work bench' application and toolkit
    Copyright (c) 2010-2016 by Bob Frazier (aka 'Big Bad Bombastic Bob')
                             all rights reserved

  DISCLAIMER:  The X11workbench application and toolkit software are supplied
               'as-is', with no waranties, either implied or explicit.

  BSD-like license:

  There is no restriction as to what you can do with this software, so long
  as you include the above copyright notice and DISCLAIMER for any distributed
  work that is equal to or derived from this one, along with this paragraph
  that explains the terms of the license if the source is also being made
  available.  A "derived work" describes a work that uses a significant portion
  of the source files or algorithms that are included with this one.
  Specifically excluded from this are files that were generated by the software,
  or anything that is included with the software that is part of another package
  (such as files that were created or added during the 'configure' process).
  Specifically included is the use of part or all of any of the X11 workbench
  toolkit source or header files in your distributed application.  If you do not
  ship the source, the above copyright statement is still required to be placed
  in a reasonably prominent place, such as documentation, splash screens, and/or
  'about the application' dialog boxes.

  Use and distribution are in accordance with GPL, LGPL, and/or the above
  BSD-like license.  See COPYING and README files for more information.


  Additional information at http://sourceforge.net/projects/X11workbench

******************************************************************************/



// INTERNAL USE ONLY for dialog controls, etc.

#ifndef _DIALOG_SUPPORT_H_INCLUDED_
#define _DIALOG_SUPPORT_H_INCLUDED_

#include "dialog_controls.h" // make sure this is included first
#include "text_object.h" // needed for  _WB_EDIT_CONTROL_

/** \ingroup dlglist
  * \typedef LISTINFO
  * \brief Structure containing data for list-related dialog controls
  *
  * Internally maintained structure containing list-related control data
  * including selection information and function callbacks for allocation,
  * de-allocation, display, and sorting.
\code
typedef struct __LISTINFO__
{
  int nItems, nMaxItems;              // size/max size of aItems (must re-alloc to increase nMaxItems)
  int nPos, nTop;                     // scroll position and position of top item
  int nHeight, nItemHeight;           // height (in items) and height of item (in pixels)
  int nFlags;                         // flags (sorted, etc.)
  Window wOwner;                      // owning window [to be notified on change]
  void *(*pfnAllocator)(const void *, int); // copy constructor to call for each item that's added
                                      // typically this will call 'malloc' followed by 'memcpy'
                                      // if NULL, the caller-supplied pointer is assigned to 'aItems' as-is
  void (*pfnDestructor)(void *);      // destructor to call for each item that's removed
                                      // typically this will point to 'free'
                                      // if NULL, the caller-supplied pointer is ignored

  void (*pfnDisplay)(WBDialogControl *pControl, void *pData, int iSelected, GC gcPaint, WB_GEOM *pGeom);
                                      // generic function to display contents of item within 'pGeom' using GC
                                      // typically one of the listbox 'display item' functions

  int (*pfnSort)(const void *, const void *); // sort proc (NULL implies strcmp)

  void *aItems[1];                    // array of item data (remainder of struct)
} LISTINFO;
\endcode
  *
  * \sa  __LISTINFO__  DLGInitControlListInfo()
  *
**/

/** \ingroup dlglist
  * \struct __LISTINFO__
  * \brief Structure containing data for list-related dialog controls
  *
  * \sa  \ref LISTINFO
**/
typedef struct __LISTINFO__
{
  int nItems,              ///< current number of valid entries in 'aItems'
      nMaxItems;           ///< max size of aItems (must re-alloc to increase nMaxItems)
  int nPos,                ///< current scroll position
      nTop;                ///< scroll position of the top item currently displayed
  int nHeight,             ///< height (in items) of display area, recalculated on resize/expose
      nItemHeight;         ///< height of a single item (in pixels)
  int nFlags;              ///< flags (sorted, etc.)
  Window wOwner;           ///< owning window [to be notified on change]
  /** \brief pointer to the copy constructor to call for each item that's added
    *
    * typically this will call 'malloc' followed by 'memcpy' to construct a new pointer\n
    * if this is NULL, the caller-supplied pointer is assigned to 'aItems' as-is
  **/
  void *(*pfnAllocator)(const void *, int);
  /** \brief destructor to call for each item that's removed
    *
    * typically this will point to 'free()'.  if it is NULL, the caller-supplied pointer is ignored on cleanup
  **/
  void (*pfnDestructor)(void *);
  /** \brief display callback function to paint the entry on the display surface
    *
    * generic callback function to display the contents of the item within 'pGeom' using
    * the provided GC.  The 'pControl' 'pData' and 'iSelected' parameters reference the
    * WBDialogControl, the list entry's data pointer, and a boolean 'selection' flag, respectively.\n
    * Typically this will be on of the listbox 'DisplayItem' API functions.
  **/
  void (*pfnDisplay)(WBDialogControl *pControl, void *pData, int iSelected, GC gcPaint, WB_GEOM *pGeom);

  /** \brief Optional sort comparison function.  NULL implies 'strcmp' */
  int (*pfnSort)(const void *, const void *); // sort proc (NULL implies strcmp)

  /** \brief The array of item data, integrated into the memory block containing this structure */
  void *aItems[1];                    // array of item data (remainder of struct)
} LISTINFO;



// specialized structures 'derived' from WBDialogControl (internal only)
/** \ingroup dlgctrl
  * \brief Static 'Image' control structure
  *
  * Structure allocated for Image control
**/
struct _WB_IMAGE_CONTROL_
{
  WBDialogControl wbDLGCtrl; ///< Standard dialog control members
  Pixmap pixmap;             ///< foreground pixmap
  Pixmap pixmap2;            ///< background (transparency) pixmap
} WBImageControl;

/** \ingroup dlgctrl
  * \brief Button 'pushbutton' control structure
  *
  * Structure allocated for pushbuttons.  allows assigning an image or icon
**/
struct _WB_PUSHBUTTON_CONTROL_
{
  WBDialogControl wbDLGCtrl; ///< Standard dialog control members
  Pixmap pixmap;             ///< foreground pixmap
  Pixmap pixmap2;            ///< background (transparency) pixmap
} WBPushButtonControl;

/** \ingroup dlgctrl
  * \brief Edit control structure
  *
  * Structure allocated for Edit control, allows for an edit state buffer
**/
typedef struct _WB_EDIT_CONTROL_
{
  WBDialogControl wbDLGCtrl; ///< Standard dialog control members
  TEXT_OBJECT xTextObject;   ///< A Text Object associated with the edit text
} WBEditControl;

/** \ingroup dlglist
  * \typedef WBListCurSel
  * \brief Structure containing information about the current selection in a list
  *
  * Typically used in a listbox or combo box, this structure specifies the current list
  * selection info for a listbox, combo box, or tree control.\n
  * NOTE:  this structure must immediately follow the WBDialogControl members in the control's structure
  * for a control that has the CONTROL_SupportListInfo flag.
**/
typedef struct _WB_LIST_CURSEL_
{
  int iCurSel;      ///< current selection
  int iTopIndex;    ///< index of item at top of window
  int iHeight;      ///< calculated height of window in "entries" (see next member)
  int iEntryHeight; ///< cached display height of each entry (calculated by Expose handler)
} WBListCurSel;


/** \ingroup dlgctrl
  * \brief List control structure
  *
  * Structure allocated for List control
**/
typedef struct _WB_LIST_CONTROL_
{
  WBDialogControl wbDLGCtrl; ///< Standard dialog control members
  WBListCurSel sel;          ///< selection state, must follow wbDLGCtrl
  int *pSelBitmap;           ///< bitmap of selections (when applicable) (use 'malloc/free')
  int cbBitmap;              ///< size of bitmap (in bytes, granular at sizeof(int))
} WBListControl;

/** \ingroup dlgctrl
  * \brief List control structure
  *
  * Structure allocated for List control
**/
typedef struct _WB_COMBO_CONTROL_
{
  WBDialogControl wbDLGCtrl; ///< Standard dialog control members
  WBListCurSel sel;          ///< selection state, must follow wbDLGCtrl
  TEXT_OBJECT xTextObject;   ///< A Text Object associated with the editable text
} WBComboControl;

/** \ingroup dlgctrl
  * \brief Static 'Image' control structure
  *
  * Structure allocated for Tree control
**/
typedef struct _WB_TREE_CONTROL_
{
  WBDialogControl wbDLGCtrl; ///< Standard dialog control members
  WBListCurSel sel;          ///< must follow wbDLGCtrl
} WBTreeControl;



void DLGCDestroyProperties(WBDialogPropList *);

LISTINFO *DLGCListInfoConstructor(Window wOwner, int nMax, int nFlags,
                                  void *(*pfnAllocator)(const void *,int), void (*pfnDestructor)(void *),
                                  void (*pfnDisplay)(WBDialogControl *, void *, int, GC, WB_GEOM *),
                                  int (*pfnSort)(const void *, const void *));

void DLGCListInfoDestructor(LISTINFO *);


void DLGCDefaultListControlDisplayProc(WBDialogControl *pList, void *pData, int iSelected, GC gc, WB_GEOM *pGeom);



#ifndef DIALOG_SUPPORT_C

extern const Atom aDLGC_TEXT;
extern const Atom aDLGC_CAPTION;
extern const Atom aDLGC_FONT;
extern const Atom aDLGC_SCROLLINFO;
extern const Atom aDLGC_LISTINFO;

#endif // DIALOG_SUPPORT_C


#ifdef NO_DEBUG
#define DEBUG_DUMP_LIST(X)
#else // !NO_DEBUG
void DEBUG_DUMP_LIST(WBDialogControl *pCtrl);
#endif // NO_DEBUG


#endif // _DIALOG_SUPPORT_H_INCLUDED_


