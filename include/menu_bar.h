//////////////////////////////////////////////////////////////////////////////////////////
//                                               _                   _                  //
//           _ __ ___    ___  _ __   _   _      | |__    __ _  _ __ | |_                //
//          | '_ ` _ \  / _ \| '_ \ | | | |     | '_ \  / _` || '__|| '_ \              //
//          | | | | | ||  __/| | | || |_| |     | |_) || (_| || | _ | | | |             //
//          |_| |_| |_| \___||_| |_| \__,_|_____|_.__/  \__,_||_|(_)|_| |_|             //
//                                        |_____|                                       //
//                                                                                      //
//                        generic menu bar implementation                               //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

/*****************************************************************************

    X11workbench - X11 programmer's 'work bench' application and toolkit
    Copyright (c) 2010-2019 by Bob Frazier (aka 'Big Bad Bombastic Bob')


  DISCLAIMER:  The X11workbench application and toolkit software are supplied
               'as-is', with no warranties, either implied or explicit.
               Any claims to alleged functionality or features should be
               considered 'preliminary', and might not function as advertised.

  MIT-like license:

  There is no restriction as to what you can do with this software, so long
  as you include the above copyright notice and DISCLAIMER for any distributed
  work that is equal to or derived from this one, along with this paragraph
  that explains the terms of the license if the source is also being made
  available.  A "derived work" describes a work that uses a significant portion
  of the source files or algorithms that are included with this one.
  Specifically excluded from this are files that were generated by the software,
  or anything that is included with the software that is part of another package
  (such as files that were created or added during the 'configure' process).
  Specifically included is the use of part or all of any of the X11 workbench
  toolkit source or header files in your distributed application.  If you do not
  ship the source, the above copyright statement is still required to be placed
  in a reasonably prominent place, such as documentation, splash screens, and/or
  'about the application' dialog boxes.

  Use and distribution are in accordance with GPL, LGPL, and/or the above
  MIT-like license.  See COPYING and README files for more information.


  Additional information at http://sourceforge.net/projects/X11workbench

******************************************************************************/

/** \file menu_bar.h
  * \brief Definition file for menu bar window structures and API functions
  *
  * This is the definition file for menus bar window functions and structures
*/

/** \ingroup frame
  * \defgroup menu_bar Menu Bar window - functions and structures
  *
  * Structures and API functions for managing and working with menu bar windows.  A menu
  * bar is a window that contains one or more text menu items, usually displaying a popup menu
  * whenever a text menu item is activated.  The popup menu is displayed as needed (normally hidden).\n
  * Normally a menu bar will be part of a frame window, and will appear at the top.
**/



#ifndef MENU_BAR_H_INCLUDED
#define MENU_BAR_H_INCLUDED

#include "menu.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


#define MENU_WINDOW_TAG (*((const unsigned int *)"MWMW"))

/** \ingroup menu_bar
  * \struct  __WBMenuBarWindow__
  * \copydoc WBMenuBarWindow
**/
/** \typedef WBMenuBarWindow
  * \ingroup menu_bar
  * \brief structure for defining a menu bar window
  *
  * Definition for the structure that defines a menu bar window
  *
  * \code

  typedef struct __WBMenuBarWindow__
  {
    unsigned int ulTag; // tag indicating I'm a 'Menu Bar' window
    Window wSelf;       // The window ID of the menu bar window
    Window wOwner;      // The window ID of the owning window

    WBMenu *pMenu;      // a pointer to the associated WBMenu structure

    int iX;             // menu bar 'X' position within the owner's client area
    int iY;             // menu bar 'Y' position within the owner's client area
    int iWidth;         // menu bar width
    int iHeight;        // menu bar height
    int iSelected;      // currently selected menu (for internal-only menu UI purposes)
    int iPrevSel;       // previously selected menu item (for internal-only menu UI purposes)
    int iFlags;         // flags that determine behavior (reserved)

  } WBMenuBarWindow;

  * \endcode
  *
  * \sa WBMenu
  *
**/
typedef struct __WBMenuBarWindow__
{
  unsigned int ulTag; ///< tag indicating I'm a 'Menu Bar' window
  Window wSelf;       ///< The window ID of the menu bar window
  Window wOwner;      ///< The window ID of the owning window

  WBMenu *pMenu;      ///< a pointer to the associated WBMenu structure

  int iX;             ///< menu bar 'X' position within the owner's client area
  int iY;             ///< menu bar 'Y' position within the owner's client area
  int iWidth;         ///< menu bar width
  int iHeight;        ///< menu bar height
  int iSelected;      ///< currently selected menu (for internal-only menu UI purposes)
  int iPrevSel;       ///< previously selected menu item (for internal-only menu UI purposes)
  int iFlags;         ///< flags that determine behavior (reserved)

} WBMenuBarWindow;


// Initialization, global objects, and default objects

/** \ingroup menu_bar
  * \brief Initialize global resources for Menu Bar windows
  *
  * \returns non-zero on success, zero on error
  *
  * Use this function to initialize the 'Menu Bar' support.
  *
  * Header File:  menu_bar.h
**/
int MBInitGlobal(void);

/**
  * \ingroup menu_bar
 @{
**/
extern XColor clrMenuFG;               ///< menu foreground color
extern XColor clrMenuBG;               ///< menu background color
extern XColor clrMenuActiveFG;         ///< menu 'active' foreground color
extern XColor clrMenuActiveBG;         ///< menu 'active' background color
extern XColor clrMenuBorder1;          ///< menu border color 1
extern XColor clrMenuBorder2;          ///< menu border color 2
extern XColor clrMenuBorder3;          ///< menu border color 3
extern XColor clrMenuDisabledFG;       ///< menu 'disabled' foreground color
extern XColor clrMenuActiveDisabledFG; ///< menu 'disabled but active' foreground color
/**
 @}
**/

// these are documented in menu_bar.c
extern Atom aMENU_RESIZE;              ///< Atom for 'RESIZE' client event
extern Atom aMENU_DISPLAY_POPUP;       ///< Atom for 'DISPLAY POPUP' client event
extern Atom aMENU_ACTIVATE;            ///< Atom for 'ACTIVATE' client event


/** \ingroup menu_bar
  * \brief Get a pointer to the default 'Menu Bar' font structure
  *
  * \returns A pointer to the default WB_FONTC for 'Menu Bar' windows
  *
  * Use this function to obtain a pointer to the default 'Menu Bar' font structure
  *
  * Header File:  menu_bar.h
**/
WB_FONTC MBGetDefaultMenuFont(void);

// menu bar window info

/** \ingroup menu_bar
  * \brief Obtain a pointer to the WBMenuBarWindow structure from a Window ID of a Menu Bar window
  *
  * \param wID The Window ID for a 'Menu Bar' window
  * \returns A pointer to the associated WBMenuBarWindow structure, or NULL on error
  *
  * Use this function to obtain the WBMenuBarWindow struct pointer for a 'Menu Bar' window.
  *
  * Header File:  menu_bar.h
**/
static __inline__ WBMenuBarWindow *MBGetMenuBarWindowStruct(Window wID)  // for frame windows, returns the frame window struct
{
  WBMenuBarWindow *pRval = (WBMenuBarWindow *)WBGetWindowData(wID, 0);  // offset 0 for window-specific structs

  if(pRval && pRval->ulTag == MENU_WINDOW_TAG)
  {
    return(pRval);
  }

  return(NULL);
}

/** \ingroup menu_bar
  * \brief Create a Menu Bar windows and its associated WBMenuBarWindow structure
  *
  * \param wIDParent The Window ID for the owning window
  * \param pszResource a 0-byte terminated string resource that defines the menu
  * \param iFlags Additional binary flags
  * \returns A pointer to the associated WBMenuBarWindow structure, or NULL on error
  *
  * Use this function to create a Menu Bar windows and its associated WBMenuBarWindow structure.
  * You must call MBDestroyMenuBarWindow() for any non-NULL return value.
  *
  * Header File:  menu_bar.h
**/
WBMenuBarWindow *MBCreateMenuBarWindow(Window wIDParent, const char *pszResource, int iFlags);

/** \ingroup menu_bar
  * \brief Locate the first WBMenuBarWindow that is using a WBMenu structure
  *
  * \param pMenu A pointer to a WBMenu structure
  * \returns A pointer to the first WBMenuBarWindow structure that is using 'pMenu'
  *
  * Use this function to locate the first 'Menu Bar' window that is using a specific WBMenu structure
  *
  * Header File:  menu_bar.h
**/
WBMenuBarWindow *MBFindMenuBarWindow(WBMenu *pMenu);  // find first (active) window that uses 'pMenu'


/** \ingroup menu_bar
  * \brief Cause a 'layout recalculation' for a Menu Bar window
  *
  * \param pMenuBar A pointer to the WBMenuBarWindow structure associated with a Menu Bar window
  * \returns void
  *
  * Use this function to re-calculate the layout of a Menu Bar window.  Typically this will be done
  * as a result of a re-size on the owning window, or as a result of re-assigning a new WBMenu.
  *
  * Header File:  menu_bar.h
**/
void MBReCalcMenuBarWindow(WBMenuBarWindow *pMenuBar);


/** \ingroup menu_bar
  * \brief Destroy a 'Menu Bar' window
  *
  * \param pMenuBar A pointer to the WBMenuBarWindow structure associated with a Menu Bar window
  * \returns void
  *
  * Use this function to destroy a WBMenuBarWindow structure and the associated Menu Bar window,
  * as created using WBCreateMenBarWindow()
  *
  * Header File:  menu_bar.h
**/
void MBDestroyMenuBarWindow(WBMenuBarWindow *pMenuBar);  // destroy by using struct pointer


/** \ingroup menu_bar
  * \brief Get the current WBMenu for a Menu Bar window
  *
  * \param pMenuBar A pointer to the WBMenuBarWindow structure associated with a Menu Bar window
  * \returns A pointer to the WBMenu associated with this Menu Bar window
  *
  * Use this function to safely obtain the current WBMenu for a specified Menu Bar window.
  *
  * Header File:  menu_bar.h
**/
static __inline__ WBMenu * MBGetMenuBarMenu(WBMenuBarWindow *pMenuBar)
{
  if(!pMenuBar || pMenuBar->ulTag != MENU_WINDOW_TAG)
  {
    return NULL;
  }

  return pMenuBar->pMenu;
}

/** \ingroup menu_bar
  * \brief Assign a new WBMenu for a Menu Bar window
  *
  * \param pMenuBar A pointer to the WBMenuBarWindow structure associated with a Menu Bar window
  * \param pMenu A pointer to a new WBMenu to be assigned to the Menu Bar window.  Can be NULL.
  * \returns previously assigned WBMenu
  *
  * Use this function to safely assign a new WBMenu to a Menu Bar window.  This resource will be
  * destroyed when the Menu Bar window is destroyed, so if you keep a cached copy and maintain it
  * outside of the Menu Bar, be sure and assign a WBMenu of 'NULL' before destroying the menu bar.
  *
  * Header File:  menu_bar.h
**/
static __inline__ WBMenu * MBSetMenuBarMenu(WBMenuBarWindow *pMenuBar, WBMenu *pMenu)
{
WBMenu *pRval;

  if(!pMenuBar || pMenuBar->ulTag != MENU_WINDOW_TAG)
  {
    return NULL;
  }

  pRval = pMenuBar->pMenu;
  pMenuBar->pMenu = pMenu; // TODO:  reference counting?
  pMenuBar->iSelected = -1;
  pMenuBar->iPrevSel = -1;

  MBReCalcMenuBarWindow(pMenuBar);

  return pRval; // the old menu
}

/** \ingroup menu_bar
  * \brief Assign a new WBMenu for a Menu Bar window
  *
  * \param pMenuBar A pointer to the WBMenuBarWindow structure associated with a Menu Bar window
  * \param pszMenuResource A pionter to a 'menu resource' (const) character string that will be used to replace the current menu
  *
  * Use this function to safely replace the menu resource for a Menu Bar window.  The existing WBMenu
  * will be destroyed.  If you want to preserve the existing WBMenu, use MBSetMenuBarMenu() instead,
  * after constructing the replacement WBMenu from the resource.
  *
  * Header File:  menu_bar.h
**/
void MBSetMenuBarMenuResource(WBMenuBarWindow *pMenuBar, const char *pszMenuResource);


#ifdef __cplusplus
};
#endif // __cplusplus


#endif // MENU_BAR_H_INCLUDED

