//////////////////////////////////////////////////////////////////////////////////////////
//                                               _                   _                  //
//           _ __ ___    ___  _ __   _   _      | |__    __ _  _ __ | |_                //
//          | '_ ` _ \  / _ \| '_ \ | | | |     | '_ \  / _` || '__|| '_ \              //
//          | | | | | ||  __/| | | || |_| |     | |_) || (_| || | _ | | | |             //
//          |_| |_| |_| \___||_| |_| \__,_|_____|_.__/  \__,_||_|(_)|_| |_|             //
//                                        |_____|                                       //
//                                                                                      //
//                        generic menu bar implementation                               //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

/*****************************************************************************

    X11workbench - X11 programmer's 'work bench' application and toolkit
    Copyright (c) 2010-2016 by Bob Frazier (aka 'Big Bad Bombastic Bob')
                             all rights reserved

  DISCLAIMER:  The X11workbench application and toolkit software are supplied
               'as-is', with no waranties, either implied or explicit.

  BSD-like license:

  There is no restriction as to what you can do with this software, so long
  as you include the above copyright notice and DISCLAIMER for any distributed
  work that is equal to or derived from this one, along with this paragraph
  that explains the terms of the license if the source is also being made
  available.  A "derived work" describes a work that uses a significant portion
  of the source files or algorithms that are included with this one.
  Specifically excluded from this are files that were generated by the software,
  or anything that is included with the software that is part of another package
  (such as files that were created or added during the 'configure' process).
  Specifically included is the use of part or all of any of the X11 workbench
  toolkit source or header files in your distributed application.  If you do not
  ship the source, the above copyright statement is still required to be placed
  in a reasonably prominent place, such as documentation, splash screens, and/or
  'about the application' dialog boxes.

  Use and distribution are in accordance with GPL, LGPL, and/or the above
  BSD-like license.  See COPYING and README files for more information.


  Additional information at http://sourceforge.net/projects/X11workbench

******************************************************************************/

/** \file menu_bar.h
  * \brief Definition file for menu bar window structures and API functions
  *
  * This is the definition file for menus bar window functions and structures
*/


// a menu bar is a window that contains one or more text menu items, displaying a popup menu
// whenever a text menu item is activated.  The popup menu is displayed as needed.

#ifndef MENU_BAR_H_INCLUDED
#define MENU_BAR_H_INCLUDED

#include "menu.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus


#define MENU_WINDOW_TAG (*((const unsigned int *)"MWMW"))

typedef struct
{
  unsigned int ulTag;
  Window wSelf, wOwner;

  WBMenu *pMenu;

  int iX, iY, iWidth, iHeight;  // dimensions and position of bar within window
  int iSelected;                // currently selected menu (for internal-only menu UI purposes)
  int iPrevSel;                 // previously selected menu item (for internal-only menu UI purposes)
  int iFlags;                   // flags that determine behavior (reserved)

} WBMenuBarWindow;  // located at offset 0 in window data


// Initialization, global objects, and default objects

int MBInitGlobal(void);

extern XColor clrMenuFG, clrMenuBG, clrMenuActiveFG, clrMenuActiveBG, clrMenuBorder1, clrMenuBorder2, clrMenuBorder3, clrMenuDisabledFG, clrMenuActiveDisabledFG;
extern Atom aMENU_RESIZE, aMENU_DISPLAY_POPUP, aMENU_ACTIVATE;

XFontStruct *MBGetDefaultMenuFont(void);

// menu bar window info

static __inline__ WBMenuBarWindow *MBGetMenuBarWindowStruct(Window wID)  // for frame windows, returns the frame window struct
{
  WBMenuBarWindow *pRval = (WBMenuBarWindow *)WBGetWindowData(wID, 0);  // offset 0 for window-specific structs

  if(pRval && pRval->ulTag == MENU_WINDOW_TAG)
  {
    return(pRval);
  }

  return(NULL);
}

WBMenuBarWindow *MBCreateMenuBarWindow(Window wIDParent, const char *pszResource,
//                                       int iX, int iY, int *piWidth, int *piHeight,
                                       int iFlags);

WBMenuBarWindow *MBFindMenuBarWindow(WBMenu *pMenu);  // find first (active) window that uses 'pMenu'

// pass in 'iX' and 'iY' wih 'piWidth' or 'piHeight' as the width or height of the window (as needed)
// return value indicates adjusted width or height (as needed) based on size requirements for menu display

void MBReCalcMenuBarWindow(WBMenuBarWindow *pMenuBar /*, int iX, int iY, int *piWidth, int *piHeight*/);
  // use this function to re-calculate the menu bar size when the owner window is re-sized
  // or if the menu is re-assigned.

void MBDestroyMenuBarWindow(WBMenuBarWindow *pMenuBar);  // destroy by using struct pointer


static __inline__ WBMenu * MBGetMenuBarMenu(WBMenuBarWindow *pMenuBar)
{
  if(!pMenuBar || pMenuBar->ulTag != MENU_WINDOW_TAG)
  {
    return NULL;
  }

  return pMenuBar->pMenu;
}

static __inline__ WBMenu * MBSetMenuBarMenu(WBMenuBarWindow *pMenuBar, WBMenu *pMenu)
{
WBMenu *pRval;

  if(!pMenuBar || pMenuBar->ulTag != MENU_WINDOW_TAG)
  {
    return NULL;
  }

  pRval = pMenuBar->pMenu;
  pMenuBar->pMenu = pMenu;
  pMenuBar->iSelected = -1;
  pMenuBar->iPrevSel = -1;

  MBReCalcMenuBarWindow(pMenuBar /*, -1, -1, NULL, NULL*/);

  return pRval; // the old menu
}


#ifdef __cplusplus
};
#endif // __cplusplus


#endif // MENU_BAR_H_INCLUDED

